{"version":3,"sources":["components/taskThree/TaskThree.module.css","logo.svg","components/taskTwo/TaskTwo.module.css","components/taskOne/TaskOne.js","components/taskTwo/TaskTwo.js","components/taskThree/TaskThree.js","App.js","serviceWorker.js","index.js","components/taskOne/TaskOne.module.css"],"names":["module","exports","TaskOne","columnOne","columnTwo","columnThree","columnFour","i","push","columnOneUI","map","el","key","shortId","generate","className","styles","cell","columnTwoUI","columnThreeUI","columnFourUI","grid","col","TaskTwo","containerOne","ul","li","containerTwo","smallBlock","bigBlock","TaskThree","container","App","state","taskOne","taskTwo","taskThree","toggleTaskOne","event","currentTarget","setState","toggleTaskTwo","toggleTaskThree","src","logo","alt","type","this","value","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0aa7d29.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TaskThree_container__2acOk\",\"cell\":\"TaskThree_cell__2P7wR\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerOne\":\"TaskTwo_containerOne__2j86P\",\"ul\":\"TaskTwo_ul__2mwVP\",\"li\":\"TaskTwo_li__3yZVa\",\"containerTwo\":\"TaskTwo_containerTwo__3-6IY\",\"smallBlock\":\"TaskTwo_smallBlock__2xCGZ\",\"bigBlock\":\"TaskTwo_bigBlock__YwVDx\"};","import React from 'react';\r\nimport styles from './TaskOne.module.css';\r\nimport shortId from 'shortid';\r\n\r\nfunction TaskOne() {\r\n  let columnOne = [];\r\n  let columnTwo = [];\r\n  let columnThree = [];\r\n  let columnFour = [];\r\n\r\n  for (let i = 0; i < 20; i++) {\r\n    columnOne.push(1);\r\n    columnTwo.push(2);\r\n    columnThree.push(3);\r\n    columnFour.push(4);\r\n  }\r\n\r\n  let columnOneUI = columnOne.map(el => <div key={shortId.generate()} className={styles.cell}>{el}</div>);\r\n  let columnTwoUI = columnTwo.map(el => <div key={shortId.generate()} className={styles.cell}>{el}</div>);\r\n  let columnThreeUI = columnThree.map(el => <div key={shortId.generate()} className={styles.cell}>{el}</div>);\r\n  let columnFourUI = columnFour.map(el => <div key={shortId.generate()} className={styles.cell}>{el}</div>);\r\n\r\n  return (\r\n    <div className={styles.grid}>\r\n      <div className={styles.col}>\r\n        {columnOneUI}\r\n      </div>\r\n      <div className={styles.col}>\r\n        {columnTwoUI}\r\n      </div>\r\n      <div className={styles.col}>\r\n        {columnThreeUI}\r\n      </div>\r\n      <div className={styles.col}>\r\n        {columnFourUI}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskOne;\r\n","import React from 'react';\r\nimport styles from './TaskTwo.module.css';\r\n\r\n\r\nfunction TaskTwo() {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Menu</h1>\r\n      <div className={styles.containerOne}>\r\n        <ul className={styles.ul}>\r\n          <li className={styles.li}>item</li>\r\n          <li className={styles.li}>item</li>\r\n          <li className={styles.li}>item</li>\r\n          <li className={styles.li}>item</li>\r\n          <li className={styles.li}>item</li>\r\n          <li className={styles.li}>item</li>\r\n          <li className={styles.li}>item</li>\r\n        </ul>\r\n      </div>\r\n      <h1>Flex</h1>\r\n      <div className={styles.containerTwo}>\r\n        <div className={styles.smallBlock}>item</div>\r\n        <div className={styles.bigBlock}>item</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskTwo;\r\n","import React from 'react';\r\nimport styles from './TaskThree.module.css';\r\n\r\n\r\nfunction TaskThree() {\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n      <div className={styles.cell}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskThree;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TaskOne from './components/taskOne/TaskOne';\nimport TaskTwo from \"./components/taskTwo/TaskTwo\";\nimport TaskThree from \"./components/taskThree/TaskThree\";\n\nclass App extends React.Component {\n  state = {\n    taskOne: 'noActive',\n    taskTwo: 'noActive',\n    taskThree: 'noActive'\n  };\n\n  toggleTaskOne = (event) => {\n    event.currentTarget.className === 'noActive' ?\n      this.setState({taskOne: 'active', taskTwo: 'noActive', taskThree: 'noActive'}) :\n      this.setState({taskOne: 'noActive'})\n  };\n\n  toggleTaskTwo = (event) => {\n    event.currentTarget.className === 'noActive' ?\n      this.setState({taskTwo: 'active', taskOne: 'noActive', taskThree: 'noActive'}) :\n      this.setState({taskTwo: 'noActive'})\n  };\n\n  toggleTaskThree = (event) => {\n    event.currentTarget.className === 'noActive' ?\n      this.setState({taskThree: 'active', taskOne: 'noActive', taskTwo: 'noActive'}) :\n      this.setState({taskThree: 'noActive'})\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n          <nav>\n            <input type=\"button\"\n                   className={this.state.taskOne}\n                   value=\"task one\"\n                   onClick={event => this.toggleTaskOne(event)}/>\n            <input type=\"button\"\n                   className={this.state.taskTwo}\n                   value=\"task two\"\n                   onClick={event => this.toggleTaskTwo(event)}/>\n            <input type=\"button\"\n                   className={this.state.taskThree}\n                   value=\"task three\"\n                   onClick={event => this.toggleTaskThree(event)}/>\n          </nav>\n          {this.state.taskOne === \"active\" && <TaskOne/>}\n          {this.state.taskTwo === \"active\" && <TaskTwo/>}\n          {this.state.taskThree === \"active\" && <TaskThree/>}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"TaskOne_grid__2P4p_\",\"col\":\"TaskOne_col__2izyC\",\"cell\":\"TaskOne_cell__3fnhz\"};"],"sourceRoot":""}